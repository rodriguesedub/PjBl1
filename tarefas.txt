ðŸ“Œ Classe Pet
Atributos:

private String nome;

private String tipo; (ex.: cÃ£o, gato, papagaio etc.)

MÃ©todos:

Construtor: public Pet(String nome, String tipo)

Getters/Setters:

getNome(), setNome(String nome)

getTipo(), setTipo(String tipo)

toString() â†’ retorna string formatada:
" - Nome do pet: Rex; Tipo: CÃ£o."

ðŸ“Œ Classe Tutor
Atributos:

private int cod; (cÃ³digo sequencial gerado automaticamente)

private String nome;

private String endereco;

private LocalDate dataNasc;

private ArrayList<Pet> pets;

MÃ©todos:

Construtor: public Tutor(int cod, String nome, LocalDate dataNasc, String endereco)

Getters/Setters:

getCod(), getNome(), getEndereco(), getDataNasc()

getIdade() â†’ calcula idade com Period.between(dataNasc, LocalDate.now())

ManipulaÃ§Ã£o de pets:

public void addPet(Pet p)

public void removePet(Pet p) (opcional)

toString() â†’ retorna os dados formatados:

Cod. do tutor: 1
  Nome...........: Maria Lopes
  Data nascimento: 22/02/1988 (36 anos)
  EndereÃ§o.......: Av. Sergipe, 421
  RelaÃ§Ã£o de Pets:
  - Nome do pet: Loro; Tipo: Papagaio.

ðŸ“Œ Classe PetShop (classe principal com main)
Atributos:

private static ArrayList<Tutor> tutores;

MÃ©todos:

public static void main(String[] args) â†’ controla menu (Scanner).

public static void popularCadastro() â†’ insere tutores e pets iniciais.

public static int geraCodTutor() â†’ gera cÃ³digo sequencial automÃ¡tico.

public static void cadastrarTutorPets() â†’ cadastra tutor + seus pets.

public static void imprimirCadastro() â†’ percorre lista de tutores, imprime toString().

public static void buscarPorCodigo(int cod) â†’ procura tutor pelo cÃ³digo e exibe.

public static void excluirPorCodigo(int cod) â†’ remove tutor e seus pets.

private static boolean validaData(int d, int m, int a) â†’ valida datas de nascimento.

ðŸ‘‰ Assim, o fluxo Ã©:

Pet representa apenas o animal.

Tutor agrupa seus dados + lista de pets.

PetShop gerencia todos os tutores (cadastro principal).